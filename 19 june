Macros are handled by the pre-compiler and are thus guaranteed to be inlined. 
Macros are used for short operations and it avoids function call overhead. 
It can be used if any short operation is being done in the program repeatedly. 
Function-like macros are very beneficial when the same block of code needs to be executed multiple times.
example 
#include<stdio.h>
#define MAX_SIZE 10
int main(void)
{
    int size = 0;
    size = size + MAX_SIZE;
    printf("\n The value of size is [%d]\n",size);
    return 0;
}






#include<stdio.h>
#define MAX_SIZE 10
int main(void)
{
    int size = 0;
    size = size + MAX_SIZE;
    printf("\n The value of size is [%d]\n",size);
    return 0;
}


output
$ ./inline
a=2 and b=4
square val=25




Now, we will understand how inline functions are defined. It is very simple. Only, we need to specify “inline” keyword in its definition. 
Once you specify “inline” keyword in its definition, it requests the compiler to do optimizations for this function to save time by avoiding function call overhead.
Whenever calling to the inline function is made, the function call would be replaced by the definition of the inline function.

Inline functions provide the following advantages over macros.

Since they are functions so the type of arguments is checked by the compiler whether they are correct or not.
There is no risk if called multiple times. But there is risk in macros which can be dangerous when the argument is an expression.
They can include multiple lines of code without trailing backslashes.
Inline functions have their own scope for variables and they can return a value.
